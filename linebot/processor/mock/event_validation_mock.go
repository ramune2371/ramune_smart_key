// Code generated by MockGen. DO NOT EDIT.
// Source: event_validation.go

// Package mock_processor is a generated GoMock package.
package mock_processor

import (
	entity "linebot/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
)

// MockEventValidator is a mock of EventValidator interface.
type MockEventValidator struct {
	ctrl     *gomock.Controller
	recorder *MockEventValidatorMockRecorder
}

// MockEventValidatorMockRecorder is the mock recorder for MockEventValidator.
type MockEventValidatorMockRecorder struct {
	mock *MockEventValidator
}

// NewMockEventValidator creates a new mock instance.
func NewMockEventValidator(ctrl *gomock.Controller) *MockEventValidator {
	mock := &MockEventValidator{ctrl: ctrl}
	mock.recorder = &MockEventValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventValidator) EXPECT() *MockEventValidatorMockRecorder {
	return m.recorder
}

// ValidateEvent mocks base method.
func (m *MockEventValidator) ValidateEvent(events []*linebot.Event) ([]*entity.Operation, []*entity.Operation) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEvent", events)
	ret0, _ := ret[0].([]*entity.Operation)
	ret1, _ := ret[1].([]*entity.Operation)
	return ret0, ret1
}

// ValidateEvent indicates an expected call of ValidateEvent.
func (mr *MockEventValidatorMockRecorder) ValidateEvent(events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEvent", reflect.TypeOf((*MockEventValidator)(nil).ValidateEvent), events)
}
