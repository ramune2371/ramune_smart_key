// Code generated by MockGen. DO NOT EDIT.
// Source: user_info_dao.go

// Package mock_user_info is a generated GoMock package.
package mock_user_info

import (
	entity "linebot/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInfoDao is a mock of UserInfoDao interface.
type MockUserInfoDao struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoDaoMockRecorder
}

// MockUserInfoDaoMockRecorder is the mock recorder for MockUserInfoDao.
type MockUserInfoDaoMockRecorder struct {
	mock *MockUserInfoDao
}

// NewMockUserInfoDao creates a new mock instance.
func NewMockUserInfoDao(ctrl *gomock.Controller) *MockUserInfoDao {
	mock := &MockUserInfoDao{ctrl: ctrl}
	mock.recorder = &MockUserInfoDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoDao) EXPECT() *MockUserInfoDaoMockRecorder {
	return m.recorder
}

// GetUserByLineId mocks base method.
func (m *MockUserInfoDao) GetUserByLineId(lineId string) *entity.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLineId", lineId)
	ret0, _ := ret[0].(*entity.UserInfo)
	return ret0
}

// GetUserByLineId indicates an expected call of GetUserByLineId.
func (mr *MockUserInfoDaoMockRecorder) GetUserByLineId(lineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLineId", reflect.TypeOf((*MockUserInfoDao)(nil).GetUserByLineId), lineId)
}

// UpdateUserLastAccess mocks base method.
func (m *MockUserInfoDao) UpdateUserLastAccess(lineId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastAccess", lineId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateUserLastAccess indicates an expected call of UpdateUserLastAccess.
func (mr *MockUserInfoDaoMockRecorder) UpdateUserLastAccess(lineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastAccess", reflect.TypeOf((*MockUserInfoDao)(nil).UpdateUserLastAccess), lineId)
}

// UpsertInvalidUser mocks base method.
func (m *MockUserInfoDao) UpsertInvalidUser(lineId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInvalidUser", lineId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpsertInvalidUser indicates an expected call of UpsertInvalidUser.
func (mr *MockUserInfoDaoMockRecorder) UpsertInvalidUser(lineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInvalidUser", reflect.TypeOf((*MockUserInfoDao)(nil).UpsertInvalidUser), lineId)
}
